```{r}
#| label: medtabfunc
#| cache: true
#| cache.comments: false

medtabfunc <- function(x, data, stratavar, catdig, contdig) {
  tmp <- data %>%
    filter(!is.na(!!sym(x)) & !is.na(!!sym(stratavar)))

  pmis <- data %>%
    filter(!is.na(!!sym(stratavar))) %>%
    mutate(mis = factor(if_else(is.na(!!sym(x)), 1, 0), levels = 0:1)) %>%
    count(mis, .drop = F) %>%
    mutate(pmis = fn(n / sum(n) * 100, catdig)) %>%
    filter(mis == "1") %>%
    pull(pmis)

  cl <- class(data %>% pull(!!sym(x)))
  if (cl %in% c("character", "factor")) {
    out <- tmp %>%
      group_by(!!sym(stratavar), .drop = F) %>%
      count(!!sym(x), .drop = F) %>%
      mutate(
        out = paste0(n, " (", fn(n / sum(n) * 100, catdig), ")"),
        out = case_when(
          sum(n) == 0 ~ "-",
          n < 10 ~ "<10",
          TRUE ~ out
        ),
        level = !!sym(x)
      ) %>%
      ungroup() %>%
      select(!!sym(stratavar), out, level) %>%
      pivot_wider(names_from = !!sym(stratavar), values_from = out)

    # p-value
    check <- tmp %>%
      count(!!sym(stratavar), !is.na(!!sym(x)))
    if (nrow(check) >= 2) {
      p <- fn(chisq.test(tmp %>% pull(!!sym(stratavar)), tmp %>% pull(!!sym(x)))$p.value, p = T, dig = 3)
    } else {
      p <- "-"
    }

    # if levels No, Yes only present Yes
    levs <- out %>% pull(level)
    nlevs <- length(levs)
    if (nlevs == 2 & all(levs %in% c("No", "Yes"))) {
      out <- out %>%
        filter(level == "Yes") %>%
        mutate(
          var = x,
          p = p,
          pmis = pmis,
          level = NA
        )
    } else {
      out <- out %>%
        mutate(
          var = NA,
          p = NA,
          pmis = NA
        )
      out <- out %>% add_row(
        var = x,
        p = p,
        pmis = pmis,
        .before = 1
      )
    }
  } else if (cl %in% c("numeric", "integer")) {
    if (length(contdig) > 1) {
      if (any(contdig$vars %in% x)) {
        contdig <- contdig %>%
          filter(vars == x) %>%
          pull(contdig)
      } else {
        contdig <- 0
      }
    }
    tmp <- data %>%
      filter(!is.na(!!sym(x)) & !is.na(!!sym(stratavar)))
    out <- tmp %>%
      group_by(!!sym(stratavar), .drop = F) %>%
      reframe(
        med = quantile(!!sym(x), na.rm = T, probs = c(0.5)),
        q1 = quantile(!!sym(x), na.rm = T, probs = c(0.25)),
        q3 = quantile(!!sym(x), na.rm = T, probs = c(0.75)),
        n = n()
      ) %>%
      mutate(
        out = paste0(fn(med, contdig), " [", fn(q1, contdig), "-", fn(q3, contdig), "]"),
        out = case_when(
          n == 0 ~ "-",
          n < 10 ~ "<10",
          TRUE ~ out
        )
      ) %>%
      ungroup() %>%
      select(!!sym(stratavar), out) %>%
      pivot_wider(names_from = !!sym(stratavar), values_from = out)

    # p-value
    check <- tmp %>%
      count(!!sym(stratavar), !is.na(!!sym(x)))
    if (nrow(check) >= 2) {
      p <- fn(kruskal.test(formula(paste0(x, " ~ ", stratavar)), data = tmp)$p.value, p = T, dig = 3)
    } else {
      p <- "-"
    }

    out <- out %>%
      mutate(
        var = x,
        p = p,
        pmis = pmis
      )
  } else {
    stop("Unknown class in baseline table")
  }
}
```

```{r}
#| label: tbl-med
#| cache: true
#| cache.comments: false
#| dependson: medtabfunc
#| tbl-cap: "Use of GDMT"

contdig <- 0
catdig <- 0

medvarsbase <- c(
  "sos_lm_bbl1", "targetdose_cat_bbl_1", "targetdose_bbl_1",
  "sos_lm_rasiarni1", "targetdose_cat_rasiarni_1", "targetdose_rasiarni_1",
  "sos_lm_mra1", "targetdose_cat_mra_1", "targetdose_mra_1"
)
medvarsfu <- c(
  "sos_lm_bbl2", "targetdose_cat_bbl_2", "targetdose_bbl_2",
  "sos_lm_rasiarni2", "targetdose_cat_rasiarni_2", "targetdose_rasiarni_2",
  "sos_lm_mra2", "targetdose_cat_mra_2", "targetdose_mra_2"
)

tabbase <- lapply(medvarsbase,
  FUN = medtabfunc, data = rsdata,
  stratavar = "crt", catdig = catdig, contdig = contdig
)
tabbase <- bind_rows(tabbase) %>%
  select(var, level, Control, CRT, p)

tabfu <- lapply(medvarsfu,
  FUN = medtabfunc, data = rsdata,
  stratavar = "crt", catdig = catdig, contdig = contdig
)
tabfu <- bind_rows(tabfu) %>%
  select(Control, CRT, p)

tabboth <- bind_cols(tabbase, tabfu) %>%
  mutate(
    var = case_when(
      var == "sos_lm_bbl1" ~ "Treated with Beta-blocker",
      var == "sos_lm_rasiarni1" ~ "Treated with ACEi/ARB/ARNi",
      var == "sos_lm_mra1" ~ "Treated with MRA",
      !is.na(var) ~ "Target dose (%)"
    ),
    var = if_else(!is.na(level) & !is.na(var),
      paste0(var, " ", level),
      coalesce(var, paste0("  ", level))
    )
  ) %>%
  select(-level)

cn <- c("Variable", rep(c(levels(rsdata %>% pull(crt)), "p-value"), 2))

# excel
make_one_xlsxsheet(tabboth, colnames = cn)

cn <- sanitize_text(cn)

tabboth <- tabboth %>%
  mutate(var = sanitize_text(var))

indent_rows <- tabboth %>%
  mutate(
    indent_rows = str_detect(var, "  "),
    rows = row_number()
  ) %>%
  filter(indent_rows) %>%
  pull(rows)

default_kable(tabboth,
  escape = FALSE,
  col.names = cn
) %>%
  add_indent(indent_rows) %>%
  footnote(
    footnote_order = c("general", "symbol", "alphabet"),
    general_title = "",
    general = c(
      "Categorical variables are presented with n (%) and tested with chi-square test and continuous variables with median [q1-q3] and tested with Kruskal-Wallis test."
    ),
    threeparttable = T
  ) %>%
  add_header_above(c(" " = 1, "Baseline" = 3, "1 year follow-up" = 3))
```
